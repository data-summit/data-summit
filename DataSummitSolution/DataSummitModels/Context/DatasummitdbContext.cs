// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DataSummitDbModels;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DataSummitDbModels.Context
{
    public partial class DatasummitdbContext : DbContext
    {
        public DatasummitdbContext()
        {
        }

        public DatasummitdbContext(DbContextOptions<DatasummitdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<AzureCompanyResourceUrl> AzureCompanyResourceUrls { get; set; }
        public virtual DbSet<BlockPosition> BlockPositions { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentFeature> DocumentFeatures { get; set; }
        public virtual DbSet<DocumentLayer> DocumentLayers { get; set; }
        public virtual DbSet<DocumentTemplate> DocumentTemplates { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeTerritory> EmployeeTerritories { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<GoogleLanguage> GoogleLanguages { get; set; }
        public virtual DbSet<ImageGrid> ImageGrids { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<PaperOrientation> PaperOrientations { get; set; }
        public virtual DbSet<PaperSize> PaperSizes { get; set; }
        public virtual DbSet<Point> Points { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProfileAttribute> ProfileAttributes { get; set; }
        public virtual DbSet<ProfileVersion> ProfileVersions { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Property> Properties { get; set; }
        public virtual DbSet<Sentence> Sentences { get; set; }
        public virtual DbSet<StandardAttribute> StandardAttributes { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<UserInfo> UserInfos { get; set; }
        public virtual DbSet<UserInfoType> UserInfoTypes { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Address>(entity =>
            {
                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Addresses_Company");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Addresses_Country");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Addresses_Project");
            });

            modelBuilder.Entity<AspNetRole>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName)
                    .HasName("RoleNameIndex");

                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<AspNetRoleClaim>(entity =>
            {
                entity.HasIndex(e => e.RoleId);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaims)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_AspNetRoleClaim_AspNetRole_RoleId");
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.HasIndex(e => e.NormalizedEmail)
                    .HasName("EmailIndex");

                entity.HasIndex(e => e.NormalizedUserName)
                    .HasName("UserNameIndex")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.GenderId).HasDefaultValueSql("1");

                entity.Property(e => e.IsTrial).HasDefaultValueSql("1");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.AspNetUsers)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AspNetUsers_Companies");

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.AspNetUsers)
                    .HasForeignKey(d => d.GenderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AspNetUsers_Genders");

                entity.HasOne(d => d.UserType)
                    .WithMany(p => p.AspNetUsers)
                    .HasForeignKey(d => d.UserTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AspNetUsers_UserTypes");
            });

            modelBuilder.Entity<AspNetUserClaim>(entity =>
            {
                entity.HasIndex(e => e.UserId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AspNetUserClaim_AspNetUser_UserId");
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey })
                    .HasName("PK_AspNetUserLogin");

                entity.HasIndex(e => e.UserId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AspNetUserLogin_AspNetUser_UserId");
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK_AspNetUserRole");

                entity.HasIndex(e => e.RoleId);

                entity.HasIndex(e => e.UserId);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_AspNetUserRole_AspNetRole_RoleId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AspNetUserRole_AspNetUser_UserId");
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name })
                    .HasName("PK_AspNetUserToken");
            });

            modelBuilder.Entity<AzureCompanyResourceUrl>(entity =>
            {
                entity.HasOne(d => d.Company)
                    .WithMany(p => p.AzureCompanyResourceUrls)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_AzureCompanyResourceUrls_Companies");
            });

            modelBuilder.Entity<BlockPosition>(entity =>
            {
                entity.Property(e => e.BlockPositionId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.Property(e => e.CompanyNumber).IsUnicode(false);

                entity.Property(e => e.Vatnumber).IsUnicode(false);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.CountryId).ValueGeneratedNever();

                entity.Property(e => e.Iso).IsUnicode(false);

                entity.Property(e => e.Iso3).IsUnicode(false);
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.Property(e => e.AlphabeticCode).IsUnicode(false);

                entity.Property(e => e.MinorUnit).IsUnicode(false);

                entity.Property(e => e.NumericCode).IsUnicode(false);
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.HasOne(d => d.PaperOrientation)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.PaperOrientationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Documents_PaperOrientations");

                entity.HasOne(d => d.PaperSize)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.PaperSizeId)
                    .HasConstraintName("FK_Documents_PaperSizes");

                entity.HasOne(d => d.ProfileVersion)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.ProfileVersionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Documents_ProfileVersions");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Documents_Projects");
            });

            modelBuilder.Entity<DocumentFeature>(entity =>
            {
                entity.HasOne(d => d.Document)
                    .WithMany(p => p.DocumentFeatures)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_DocumentFeatures_Documents");
            });

            modelBuilder.Entity<DocumentLayer>(entity =>
            {
                entity.HasOne(d => d.Document)
                    .WithMany(p => p.DocumentLayers)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_DocumentLayers_Documents");
            });

            modelBuilder.Entity<DocumentTemplate>(entity =>
            {
                entity.Property(e => e.DocumentTemplateId).ValueGeneratedNever();

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.DocumentTemplates)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_DocumentTemplates_Documents");

                entity.HasOne(d => d.ProfileVersion)
                    .WithMany(p => p.DocumentTemplates)
                    .HasForeignKey(d => d.ProfileVersionId)
                    .HasConstraintName("FK_DocumentTemplates_ProfileVersions");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.EmployeeId).ValueGeneratedNever();

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.GenderId)
                    .HasConstraintName("FK_Employees_Genders");
            });

            modelBuilder.Entity<EmployeeTerritory>(entity =>
            {
                entity.HasKey(e => new { e.EmployeeId, e.TerritoryId });
            });

            modelBuilder.Entity<ImageGrid>(entity =>
            {
                entity.HasOne(d => d.Document)
                    .WithMany(p => p.ImageGrids)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImageGrids_Documents");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.Freight).HasDefaultValueSql("0");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Orders_Companies");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ProductId })
                    .HasName("PK_Order_Detail");

                entity.Property(e => e.Quantity).HasDefaultValueSql("1");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Order");
            });

            modelBuilder.Entity<PaperSize>(entity =>
            {
                entity.Property(e => e.PaperSizeId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Point>(entity =>
            {
                entity.Property(e => e.PointId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfileAttribute>(entity =>
            {
                entity.HasOne(d => d.BlockPosition)
                    .WithMany(p => p.ProfileAttributes)
                    .HasForeignKey(d => d.BlockPositionId)
                    .HasConstraintName("FK_ProfileAttributes_BlockPositions");

                entity.HasOne(d => d.PaperSize)
                    .WithMany(p => p.ProfileAttributes)
                    .HasForeignKey(d => d.PaperSizeId)
                    .HasConstraintName("FK_ProfileAttributes_PaperSizes");

                entity.HasOne(d => d.ProfileVersion)
                    .WithMany(p => p.ProfileAttributes)
                    .HasForeignKey(d => d.ProfileVersionId)
                    .HasConstraintName("FK_ProfileAttributes_ProfileVersions");

                entity.HasOne(d => d.StandardAttribute)
                    .WithMany(p => p.ProfileAttributes)
                    .HasForeignKey(d => d.StandardAttributeId)
                    .HasConstraintName("FK_ProfileAttributes_StandardAttributes");
            });

            modelBuilder.Entity<ProfileVersion>(entity =>
            {
                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ProfileVersions)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_ProfileVersions_Companies");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Projects_Companies");
            });

            modelBuilder.Entity<Property>(entity =>
            {
                entity.HasOne(d => d.ProfileAttribute)
                    .WithMany(p => p.Properties)
                    .HasForeignKey(d => d.ProfileAttributeId)
                    .HasConstraintName("FK_Properties_ProfileAttributes");

                entity.HasOne(d => d.Sentence)
                    .WithMany(p => p.Properties)
                    .HasForeignKey(d => d.SentenceId)
                    .HasConstraintName("FK_Properties_Sentences");
            });

            modelBuilder.Entity<Sentence>(entity =>
            {
                entity.Property(e => e.SentenceId).ValueGeneratedNever();

                entity.Property(e => e.SlendernessRatio).HasDefaultValueSql("0");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.Sentences)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_Sentences_Documents");
            });

            modelBuilder.Entity<Task>(entity =>
            {
                entity.HasOne(d => d.Document)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_Tasks_Document");
            });

            modelBuilder.Entity<UserInfo>(entity =>
            {
                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.UserInfos)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_UserInfo_AspNetUsers");

                entity.HasOne(d => d.UserInfoType)
                    .WithMany(p => p.UserInfos)
                    .HasForeignKey(d => d.UserInfoTypeId)
                    .HasConstraintName("FK_UserInfo_UserInfoTypes");
            });

            modelBuilder.Entity<UserInfoType>(entity =>
            {
                entity.Property(e => e.UserInfoTypeId).ValueGeneratedOnAdd();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}